#line 1 "lex.yy.cpp"

#line 3 "lex.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer CfdgFlexLexer

#ifdef yyalloc
#define Cfdgalloc_ALREADY_DEFINED
#else
#define yyalloc Cfdgalloc
#endif

#ifdef yyrealloc
#define Cfdgrealloc_ALREADY_DEFINED
#else
#define yyrealloc Cfdgrealloc
#endif

#ifdef yyfree
#define Cfdgfree_ALREADY_DEFINED
#else
#define yyfree Cfdgfree
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if 1 //defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 90
#define YY_END_OF_BUFFER 91
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[305] =
    {   0,
        0,    0,   91,   89,   87,   88,   88,   75,   89,    1,
       89,   89,   89,   89,   89,   85,   66,   15,   69,   81,
       81,   81,   81,   81,   89,   40,   38,   81,   81,   31,
       34,   81,   81,   58,   29,   47,   81,   81,   43,   44,
       45,   89,   81,   81,   87,   88,    0,    3,    1,   76,
        0,   79,   21,   82,    2,    1,   85,   82,   85,    0,
       67,   73,   72,   70,    0,    0,   81,    0,   81,   81,
       81,   81,   81,   78,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   17,   81,   81,   81,   81,   81,
       81,   81,   64,   65,   81,   81,   81,   81,   81,   81,

       81,   81,   81,   60,   62,   61,   63,   56,   54,   50,
        0,   77,   23,   81,   81,   81,   24,   82,    0,    1,
        0,   82,   84,   82,    0,    0,   83,    0,    0,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   33,   81,   81,   14,   81,   81,   81,
       81,   81,   36,   81,   81,   81,   81,   81,   81,   81,
       81,   81,    0,    0,    0,    0,   22,   25,   74,   68,
       71,    0,   83,    0,   83,   83,    0,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   20,   81,
       18,   81,   30,   81,   81,   12,   81,   10,   81,    9,

       81,   81,   46,   48,   81,   81,    8,   26,   81,   81,
        0,    0,   49,   52,   83,   83,    0,   81,   81,   80,
       81,   81,   81,   81,   81,   81,   39,   81,   32,   81,
       13,   81,   81,   81,   57,   81,   81,   11,   81,   81,
       81,   42,   59,    0,    0,    0,   86,   81,   81,   81,
       81,   81,   81,   81,   81,    7,   81,   28,   81,   81,
       19,   81,   81,   55,    0,    0,   81,   81,   81,   81,
       16,    6,   81,   81,   81,   81,    0,    0,   81,   81,
       81,   81,   81,   81,   81,    0,    0,   81,   81,   81,
       81,   27,   41,    0,    0,    5,   37,   35,    4,    0,

        0,   53,   51,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    1,    8,    9,    1,    1,
        1,   10,   11,    1,   12,   13,   14,   15,   16,   17,
       15,   15,   15,   15,   15,   15,   15,   18,    1,   19,
       20,   21,    1,    1,   22,   23,   24,   23,   25,   23,
       23,   23,   26,   23,   23,   27,   28,   29,   30,   31,
       23,   32,   33,   34,   35,   36,   23,   23,   37,   23,
        1,    1,    1,   38,   39,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   23,   49,   50,   51,   52,
       53,   54,   23,   55,   56,   57,   58,   23,   59,   60,
       61,   62,    1,   63,    1,    1,    1,   64,   23,   23,
       23,   23,   23,   23,   23,   65,   66,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   67,   23,   68,
       23,   23,   23,   69,   70,   71,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   72,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   73,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   74,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23
    } ;

static const YY_CHAR yy_meta[75] =
    {   0,
        1,    1,    2,    2,    1,    1,    1,    1,    1,    1,
        1,    3,    3,    1,    4,    4,    4,    5,    1,    1,
        1,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    1,    4,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    1,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6
    } ;

static const flex_int16_t yy_base[312] =
    {   0,
        0,    0,  318, 1251,  312, 1251,  310, 1251,   72,    0,
      300,  284,  284,   64,   72,   75,   64,  274,  272,   81,
       83,   85,   92,   96,  253,  103,  110,  112,  119,  122,
      126,  129,  133,  136,  143,  170,  145,  177,  195,  218,
      155,  158,  179,  210,  280, 1251,  234, 1251,    0, 1251,
      267, 1251, 1251,  233, 1251,    0,  254,  239,  253,  269,
     1251, 1251, 1251, 1251,  250,   94,  247,  244,  275,  277,
      288,  290,  292, 1251,  299,  303,  311,  313,  320,  322,
      324,  331,  334,  344,  346,  353,  355,  366,  373,  377,
      380,  388,  390,  392,  399,  401,  403,  415,  412,  427,

      430,  437,  445,  448,  455,  458,  466,  207,  198,  188,
      205, 1251,  473,  477,  480,  484, 1251, 1251,  488,    0,
      226, 1251, 1251,  493,  500,  227,  505,   98,    0,  511,
      513,  515,  537,  545,  522,  526,  547,  554,  561,  564,
      568,  571,  575,  578,  585,  589,  596,  605,  607,  609,
      618,  622,  630,  632,  639,  642,  649,  651,  658,  661,
      669,  672,  179,  184,  182,  167,  679,  681,  694,  697,
      701,  256,  708,  711,  722, 1251,   74,  202,  722,  730,
      732,  740,  743,  750,  754,  758,  767,  774,  777,  784,
      787,  794,  796,  804,  806,  813,  817,  820,  824,  827,

      834,  836,  838,  845,  848,  857,  859,  861,  870,  872,
      169,  169, 1251,  151, 1251, 1251,  120,  188,  874,  882,
      884,  891,  895,  898,  909,  917,  919,  926,  928,  930,
      937,  939,  941,  948,  950,  952,  959,  961,  970,  972,
      982,  989,  991,  162,  147,  132,  172,  993, 1000, 1002,
     1004, 1015, 1017, 1025, 1027, 1034, 1036, 1038, 1045, 1047,
     1049, 1056, 1060, 1251,  122,  138, 1063, 1071, 1073, 1088,
     1091, 1098, 1102, 1105, 1109, 1112,  123,  114, 1116, 1123,
     1125, 1134, 1136, 1144, 1148,  120,  111, 1151, 1158, 1160,
     1167, 1171, 1179,   73,   74, 1183, 1190, 1192, 1203,   50,

       50, 1251, 1251, 1251, 1221, 1227, 1231, 1237, 1241,   83,
     1244
    } ;

static const flex_int16_t yy_def[312] =
    {   0,
      304,    1,  304,  304,  304,  304,  304,  304,  305,  306,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  307,
      307,  307,  307,  307,  304,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  304,  307,  307,  304,  304,  305,  304,  306,  304,
      304,  304,  304,  304,  304,  308,  304,  304,  304,  304,
      304,  304,  304,  304,  309,  309,  307,  304,  307,  307,
      307,  307,  307,  304,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,

      307,  307,  307,  307,  307,  307,  307,  304,  304,  304,
      304,  304,  307,  307,  307,  307,  304,  304,  304,  308,
      304,  304,  304,  304,  304,  304,  304,  309,  310,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  304,  304,  304,  304,  307,  307,  307,  307,
      307,  304,  304,  304,  304,  304,  309,  311,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,

      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      304,  304,  304,  304,  304,  304,  309,  311,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  304,  304,  304,  309,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  304,  304,  304,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  304,  304,  307,  307,
      307,  307,  307,  307,  307,  304,  304,  307,  307,  307,
      307,  307,  307,  304,  304,  307,  307,  307,  307,  304,

      304,  304,  304,    0,  304,  304,  304,  304,  304,  304,
      304
    } ;

static const flex_int16_t yy_nxt[1326] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,    4,   11,    4,
       12,   13,   14,   15,   16,   16,   16,    4,   17,   18,
       19,   20,   21,   22,   21,   21,   23,   24,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   25,    4,   26,
       27,   28,   21,   29,   30,   21,   31,   32,   21,   33,
       21,   21,   21,   34,   35,   36,   37,   21,   38,   39,
       40,   41,   42,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   43,   44,   48,   48,   53,   48,   54,   54,
       54,   55,   57,   61,   62,   56,   66,   58,  178,   59,
       59,   59,   65,   66,   65,   66,   65,   66,   68,   60,

       68,  303,   68,   65,   66,  302,   66,   65,   66,   68,
       66,   70,   69,   68,   65,   66,  217,   72,   60,   71,
       68,   65,   66,   65,   66,   73,  301,   68,  300,   68,
       65,   66,   66,   65,   66,  128,   68,   65,   66,   68,
       65,   66,  177,   68,   65,   66,   68,   65,   66,   76,
       68,   79,   75,   68,   65,   66,   65,   66,  295,   77,
       68,   80,   68,  294,   78,  247,   65,   66,   81,   82,
      287,   83,   68,   85,  286,   90,   88,  278,  277,   86,
       87,   65,   66,   84,   66,   89,  266,   68,   65,   66,
       65,   66,  101,  265,   68,   91,   68,  108,  109,  102,

       92,  264,   93,   94,  110,   68,   65,   66,  246,   95,
      104,  105,   68,  111,  245,  244,   96,   97,   98,   68,
      112,   65,   66,  214,  103,  213,   99,   68,  100,   65,
       66,  212,  211,  106,  107,   68,   48,   48,  123,   48,
      118,  127,  127,  127,  166,  165,  122,   54,   54,   54,
      113,  123,  164,  124,  124,  124,  163,  119,   65,   66,
       57,  129,   66,  125,   68,   58,  121,   59,   59,   59,
      173,  173,  173,  114,  115,  116,  119,   60,  117,  126,
      126,   45,  125,  127,  127,  127,   65,   66,   65,   66,
       74,   64,   68,   63,   68,   52,   60,   51,  130,   65,

       66,   65,   66,   65,   66,   68,  131,   68,   50,   68,
       65,   66,   46,   45,   65,   66,   68,  304,  133,  132,
       68,  304,   65,   66,   65,   66,  304,  134,   68,  304,
       68,   65,   66,   65,   66,   65,   66,   68,  304,   68,
      304,   68,   65,   66,  136,   65,   66,  304,   68,  304,
      304,   68,  135,  304,  137,   65,   66,   65,   66,  304,
      138,   68,  304,   68,   65,   66,   65,   66,  304,  304,
       68,  304,   68,  304,  140,  139,  304,   65,   66,  141,
      304,  143,  142,   68,   65,   66,  304,  144,   65,   66,
       68,   65,   66,  304,   68,  304,  146,   68,  304,   65,

       66,   65,   66,   65,   66,   68,  145,   68,  304,   68,
       65,   66,   65,   66,   65,   66,   68,  304,   68,  304,
       68,  304,  147,   65,   66,  148,   65,   66,  304,   68,
      304,  149,   68,  150,  304,  304,  151,  152,   65,   66,
      154,   65,   66,  304,   68,  304,  304,   68,   65,   66,
      304,  157,  304,  304,   68,  153,   65,   66,  156,   65,
       66,  304,   68,  304,  155,   68,   65,   66,  304,   65,
       66,  304,   68,  304,  158,   68,  161,   65,   66,  159,
      160,  304,  304,   68,   65,   66,  304,  162,   65,   66,
       68,   65,   66,  304,   68,   65,   66,   68,  172,  172,

      122,   68,  173,  173,  173,  304,  304,  124,  124,  124,
      174,  174,  176,  304,  175,  175,  175,  125,  304,  127,
      127,  127,   65,   66,   65,   66,   65,   66,   68,  304,
       68,  304,   68,   65,   66,  304,  125,   65,   66,   68,
      304,  304,  179,   68,  180,  181,  168,  167,   65,   66,
      182,  169,  170,  171,   68,  304,   65,   66,   65,   66,
      304,  183,   68,  304,   68,   65,   66,  304,  185,  184,
      304,   68,   65,   66,  186,   65,   66,  304,   68,   65,
       66,   68,   65,   66,  304,   68,   65,   66,   68,   65,
       66,  304,   68,  304,  304,   68,   65,   66,  187,  188,

       65,   66,   68,  304,  189,  304,   68,   65,   66,  304,
      192,  191,  304,   68,  304,  190,   65,   66,   65,   66,
       65,   66,   68,  304,   68,  304,   68,  304,  193,   65,
       66,  304,  304,   65,   66,   68,  304,  194,  195,   68,
      304,   65,   66,   65,   66,  304,  197,   68,  304,   68,
       65,   66,  304,   65,   66,  198,   68,  199,  196,   68,
       65,   66,   65,   66,  304,  200,   68,  304,   68,   65,
       66,  304,   65,   66,  304,   68,  304,  304,   68,  304,
       65,   66,  203,   65,   66,  202,   68,  201,  304,   68,
       65,   66,   65,   66,  304,  304,   68,  304,   68,  304,

      204,  207,  304,  205,  208,   65,   66,  206,   65,   66,
      304,   68,   65,   66,   68,  215,  304,  304,   68,  304,
      209,  304,  173,  173,  173,  175,  175,  175,  210,  216,
      304,  304,  304,   65,   66,  304,  175,  175,  175,   68,
      304,   65,   66,   65,   66,  304,  219,   68,  304,   68,
      304,   65,   66,  304,   65,   66,  221,   68,  304,  220,
       68,   65,   66,  304,  222,   65,   66,   68,  304,   65,
       66,   68,  304,  304,  223,   68,  224,  304,   65,   66,
      304,  225,  304,  226,   68,   65,   66,  304,   65,   66,
      304,   68,  304,  227,   68,   65,   66,  304,   65,   66,

      304,   68,  304,  228,   68,   65,   66,   65,   66,  229,
      304,   68,  304,   68,  304,   65,   66,   65,   66,  304,
      230,   68,  304,   68,   65,   66,  304,  231,   65,   66,
       68,   65,   66,  304,   68,   65,   66,   68,   65,   66,
      304,   68,  304,  232,   68,   65,   66,   65,   66,   65,
       66,   68,  304,   68,  304,   68,   65,   66,  233,   65,
       66,  304,   68,  234,  304,   68,  304,  235,   65,   66,
       65,   66,   65,   66,   68,  304,   68,  304,   68,  238,
      236,   65,   66,   65,   66,   65,   66,   68,  237,   68,
      304,   68,  304,   65,   66,   65,   66,  304,  240,   68,

      220,   68,   65,   66,  239,  304,   65,   66,   68,   65,
       66,  304,   68,  304,  248,   68,  241,  304,  243,  251,
       65,   66,  249,  304,  250,  242,   68,  220,   65,   66,
       65,   66,  304,  252,   68,  304,   68,   65,   66,   65,
       66,   65,   66,   68,  304,   68,  220,   68,   65,   66,
       65,   66,   65,   66,   68,  304,   68,  304,   68,   65,
       66,   65,   66,   65,   66,   68,  304,   68,  304,   68,
       65,   66,   65,   66,  304,  304,   68,  304,   68,  304,
      253,   65,   66,   65,   66,  304,  254,   68,  255,   68,
      257,  304,  304,   65,   66,  258,  304,  256,  259,   68,

       65,   66,   65,   66,   65,   66,   68,  304,   68,  304,
       68,   65,   66,   65,   66,   65,   66,   68,  261,   68,
      304,   68,  267,  262,  268,  260,   65,   66,   65,   66,
      220,  220,   68,  263,   68,  304,   65,   66,   65,   66,
      304,  220,   68,  304,   68,   65,   66,   65,   66,   65,
       66,   68,  304,   68,  304,   68,   65,   66,   65,   66,
       65,   66,   68,  304,   68,  304,   68,   65,   66,  269,
      304,   65,   66,   68,   65,   66,  270,   68,  304,  272,
       68,  304,   65,   66,   65,   66,  304,  271,   68,  279,
       68,  304,  304,  274,  304,  275,  304,  220,  304,   65,

       66,  273,   65,   66,  304,   68,  304,  304,   68,   65,
       66,  304,  276,   65,   66,   68,   65,   66,  304,   68,
       65,   66,   68,   65,   66,  304,   68,   65,   66,   68,
      280,  281,  304,   68,   65,   66,   65,   66,  304,  304,
       68,  304,   68,  304,  283,   65,   66,   65,   66,  282,
      304,   68,  220,   68,  304,   65,   66,  304,  284,   65,
       66,   68,   65,   66,  304,   68,  285,  304,   68,   65,
       66,   65,   66,  304,  288,   68,  304,   68,   65,   66,
      289,  304,   65,   66,   68,  304,  290,  292,   68,  291,
       65,   66,  304,  296,   65,   66,   68,  304,  293,  304,

       68,   65,   66,   65,   66,  304,  304,   68,  304,   68,
      299,  298,  304,  297,   65,   66,  304,  304,  304,  304,
       68,   47,   47,   47,   47,   47,   47,   49,  304,   49,
       49,   49,   49,   67,   67,   67,   67,  120,  304,  120,
      120,  120,  120,   65,   65,  304,   65,  218,  218,  218,
        3,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,

      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304
    } ;

static const flex_int16_t yy_chk[1326] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    9,    9,   14,    9,   14,   14,
       14,   15,   16,   17,   17,   15,  177,   16,  310,   16,
       16,   16,   20,   20,   21,   21,   22,   22,   20,   16,

       21,  301,   22,   23,   23,  300,   66,   24,   24,   23,
      128,   22,   20,   24,   26,   26,  177,   23,   16,   22,
       26,   27,   27,   28,   28,   24,  295,   27,  294,   28,
       29,   29,  217,   30,   30,   66,   29,   31,   31,   30,
       32,   32,  128,   31,   33,   33,   32,   34,   34,   27,
       33,   28,   26,   34,   35,   35,   37,   37,  287,   27,
       35,   28,   37,  286,   27,  217,   41,   41,   29,   30,
      278,   30,   41,   32,  277,   34,   33,  266,  265,   32,
       32,   36,   36,   31,  247,   33,  246,   36,   38,   38,
       43,   43,   37,  245,   38,   35,   43,   42,   42,   37,

       35,  244,   35,   35,   42,  218,   39,   39,  214,   36,
       39,   39,   39,   42,  212,  211,   36,   36,   36,  178,
       42,   44,   44,  166,   38,  165,   36,   44,   36,   40,
       40,  164,  163,   40,   40,   40,   47,   47,  121,   47,
       54,  126,  126,  126,  111,  110,   58,   54,   54,   54,
       43,   58,  109,   58,   58,   58,  108,   54,   67,   67,
       59,   68,   65,   58,   67,   59,   57,   59,   59,   59,
      172,  172,  172,   44,   44,   44,   54,   59,   51,   60,
       60,   45,   58,   60,   60,   60,   69,   69,   70,   70,
       25,   19,   69,   18,   70,   13,   59,   12,   69,   71,

       71,   72,   72,   73,   73,   71,   70,   72,   11,   73,
       75,   75,    7,    5,   76,   76,   75,    3,   72,   71,
       76,    0,   77,   77,   78,   78,    0,   73,   77,    0,
       78,   79,   79,   80,   80,   81,   81,   79,    0,   80,
        0,   81,   82,   82,   76,   83,   83,    0,   82,    0,
        0,   83,   75,    0,   77,   84,   84,   85,   85,    0,
       78,   84,    0,   85,   86,   86,   87,   87,    0,    0,
       86,    0,   87,    0,   80,   79,    0,   88,   88,   81,
        0,   83,   82,   88,   89,   89,    0,   84,   90,   90,
       89,   91,   91,    0,   90,    0,   87,   91,    0,   92,

       92,   93,   93,   94,   94,   92,   86,   93,    0,   94,
       95,   95,   96,   96,   97,   97,   95,    0,   96,    0,
       97,    0,   88,   99,   99,   89,   98,   98,    0,   99,
        0,   90,   98,   90,    0,    0,   91,   92,  100,  100,
       96,  101,  101,    0,  100,    0,    0,  101,  102,  102,
        0,   99,    0,    0,  102,   95,  103,  103,   98,  104,
      104,    0,  103,    0,   97,  104,  105,  105,    0,  106,
      106,    0,  105,    0,  100,  106,  102,  107,  107,  101,
      101,    0,    0,  107,  113,  113,    0,  103,  114,  114,
      113,  115,  115,    0,  114,  116,  116,  115,  119,  119,

      124,  116,  119,  119,  119,    0,    0,  124,  124,  124,
      125,  125,  127,    0,  125,  125,  125,  124,    0,  127,
      127,  127,  130,  130,  131,  131,  132,  132,  130,    0,
      131,    0,  132,  135,  135,    0,  124,  136,  136,  135,
        0,    0,  130,  136,  130,  131,  115,  114,  133,  133,
      132,  116,  116,  116,  133,    0,  134,  134,  137,  137,
        0,  133,  134,    0,  137,  138,  138,    0,  135,  134,
        0,  138,  139,  139,  136,  140,  140,    0,  139,  141,
      141,  140,  142,  142,    0,  141,  143,  143,  142,  144,
      144,    0,  143,    0,    0,  144,  145,  145,  137,  138,

      146,  146,  145,    0,  139,    0,  146,  147,  147,    0,
      142,  141,    0,  147,    0,  140,  148,  148,  149,  149,
      150,  150,  148,    0,  149,    0,  150,    0,  143,  151,
      151,    0,    0,  152,  152,  151,    0,  145,  146,  152,
        0,  153,  153,  154,  154,    0,  149,  153,    0,  154,
      155,  155,    0,  156,  156,  150,  155,  151,  148,  156,
      157,  157,  158,  158,    0,  152,  157,    0,  158,  159,
      159,    0,  160,  160,    0,  159,    0,    0,  160,    0,
      161,  161,  155,  162,  162,  154,  161,  153,    0,  162,
      167,  167,  168,  168,    0,    0,  167,    0,  168,    0,

      156,  159,    0,  157,  160,  169,  169,  158,  170,  170,
        0,  169,  171,  171,  170,  173,    0,    0,  171,    0,
      161,    0,  173,  173,  173,  174,  174,  174,  162,  175,
        0,    0,    0,  179,  179,    0,  175,  175,  175,  179,
        0,  180,  180,  181,  181,    0,  179,  180,    0,  181,
        0,  182,  182,    0,  183,  183,  181,  182,    0,  180,
      183,  184,  184,    0,  182,  185,  185,  184,    0,  186,
      186,  185,    0,    0,  183,  186,  183,    0,  187,  187,
        0,  184,    0,  184,  187,  188,  188,    0,  189,  189,
        0,  188,    0,  185,  189,  190,  190,    0,  191,  191,

        0,  190,    0,  186,  191,  192,  192,  193,  193,  187,
        0,  192,    0,  193,    0,  194,  194,  195,  195,    0,
      188,  194,    0,  195,  196,  196,    0,  190,  197,  197,
      196,  198,  198,    0,  197,  199,  199,  198,  200,  200,
        0,  199,    0,  192,  200,  201,  201,  202,  202,  203,
      203,  201,    0,  202,    0,  203,  204,  204,  194,  205,
      205,    0,  204,  195,    0,  205,    0,  197,  206,  206,
      207,  207,  208,  208,  206,    0,  207,    0,  208,  202,
      199,  209,  209,  210,  210,  219,  219,  209,  201,  210,
        0,  219,    0,  220,  220,  221,  221,    0,  206,  220,

      219,  221,  222,  222,  205,    0,  223,  223,  222,  224,
      224,    0,  223,    0,  221,  224,  208,    0,  210,  223,
      225,  225,  222,    0,  222,  209,  225,  224,  226,  226,
      227,  227,    0,  225,  226,    0,  227,  228,  228,  229,
      229,  230,  230,  228,    0,  229,  226,  230,  231,  231,
      232,  232,  233,  233,  231,    0,  232,    0,  233,  234,
      234,  235,  235,  236,  236,  234,    0,  235,    0,  236,
      237,  237,  238,  238,    0,    0,  237,    0,  238,    0,
      228,  239,  239,  240,  240,    0,  230,  239,  232,  240,
      234,    0,    0,  241,  241,  236,    0,  233,  237,  241,

      242,  242,  243,  243,  248,  248,  242,    0,  243,    0,
      248,  249,  249,  250,  250,  251,  251,  249,  240,  250,
        0,  251,  248,  241,  249,  239,  252,  252,  253,  253,
      251,  250,  252,  242,  253,    0,  254,  254,  255,  255,
        0,  252,  254,    0,  255,  256,  256,  257,  257,  258,
      258,  256,    0,  257,    0,  258,  259,  259,  260,  260,
      261,  261,  259,    0,  260,    0,  261,  262,  262,  253,
        0,  263,  263,  262,  267,  267,  254,  263,    0,  257,
      267,    0,  268,  268,  269,  269,    0,  255,  268,  267,
      269,    0,    0,  260,    0,  262,    0,  268,    0,  270,

      270,  259,  271,  271,    0,  270,    0,    0,  271,  272,
      272,    0,  263,  273,  273,  272,  274,  274,    0,  273,
      275,  275,  274,  276,  276,    0,  275,  279,  279,  276,
      269,  270,    0,  279,  280,  280,  281,  281,    0,    0,
      280,    0,  281,    0,  274,  282,  282,  283,  283,  273,
        0,  282,  279,  283,    0,  284,  284,    0,  275,  285,
      285,  284,  288,  288,    0,  285,  276,    0,  288,  289,
      289,  290,  290,    0,  280,  289,    0,  290,  291,  291,
      281,    0,  292,  292,  291,    0,  282,  284,  292,  283,
      293,  293,    0,  288,  296,  296,  293,    0,  285,    0,

      296,  297,  297,  298,  298,    0,    0,  297,    0,  298,
      291,  290,    0,  289,  299,  299,    0,    0,    0,    0,
      299,  305,  305,  305,  305,  305,  305,  306,    0,  306,
      306,  306,  306,  307,  307,  307,  307,  308,    0,  308,
      308,  308,  308,  309,  309,    0,  309,  311,  311,  311,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,

      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[91] =
    {   0,
0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../../src-common/cfdg.l"
/* cfdg.l
// this file is part of Context Free
// ---------------------
// Copyright (C) 2005-2008 Mark Lentczner - markl@glyphic.com
// Copyright (C) 2005-2014 John Horigan - john@glyphic.com
// Copyright (C) 2005 Chris Coyne - ccoyne77@gmail.com
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
// 
// John Horigan can be contacted at john@glyphic.com or at
// John Horigan, 1209 Villa St., Mountain View, CA 94041-1123, USA
//
// Mark Lentczner can be contacted at markl@glyphic.com or at
// Mark Lentczner, 1209 Villa St., Mountain View, CA 94041-1123, USA
//
*/
#line 32 "../../src-common/cfdg.l"
    #define YY_NO_UNISTD_H
    #include "attributes.h"
    #include "builder.h"
    #include "scanner.h"
    #include "astexpression.h"
    #include "cfdg.tab.hpp"
    #include <cstring>
    #include <memory>
#line 876 "lex.yy.cpp"
/* calling this externally    */
/* don't want yywrap to exist.*/
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 66 "../../src-common/cfdg.l"
#define YY_USER_ACTION  yylloc->columns(utf8length(yytext, yyleng));
#line 883 "lex.yy.cpp"
#line 884 "lex.yy.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 69 "../../src-common/cfdg.l"


#line 72 "../../src-common/cfdg.l"
 /* code to place at the beginning of yylex() */

    // reset location
    setupLoc(yylloc);
    
    if (atStartup) {
        atStartup = false;
        return startToken;
    }

                                                                
 /* comment line */
#line 1032 "lex.yy.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 305 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 304 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 84 "../../src-common/cfdg.l"
{
    yylloc->step();
}
	YY_BREAK
/* C-style comment */
case 2:
YY_RULE_SETUP
#line 89 "../../src-common/cfdg.l"
{
    int c;
    char lastChar = ' ';
 
    // stop when we get to */ or end-of-file
    while ((c = yyinput()) != YY_NULL) {
        if (c == '\n') {
            // Unix or Windows EOL
            yylloc->lines(1);
        } else if (lastChar == '\r') {
            // Previous character was a Mac OS9 EOL
            yylloc->lines(1);
            yylloc->columns();
        } else {
            yylloc->columns();
        }
        
        if (c == '/' && lastChar == '*')
            break;
        
        lastChar = c;
    }
    
    if (c == YY_NULL) {
        LexerError("end-of-file in block comment");
        return token::BADEOF;
    }
    
    yylloc->step();     // move on to next token
}
	YY_BREAK
/* Quoted string */
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 121 "../../src-common/cfdg.l"
{        /* \042 is " in ASCII */
    if (yytext[yyleng - 1] != '\042') {
        LexerError("end-of-line in quoted string");
        return token::BADEOF;
    } else {
        yylval->string = new std::string(yytext + 1, yyleng - 2); 
        return token::USER_QSTRING;
    }
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 131 "../../src-common/cfdg.l"
{return token::STARTSHAPE;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 132 "../../src-common/cfdg.l"
{return token::BACKGROUND;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 133 "../../src-common/cfdg.l"
{return token::INCLUDE;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 134 "../../src-common/cfdg.l"
{return token::IMPORT;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 135 "../../src-common/cfdg.l"
{return token::TILE;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 136 "../../src-common/cfdg.l"
{return token::RULE;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 137 "../../src-common/cfdg.l"
{return token::PATH;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 138 "../../src-common/cfdg.l"
{return token::SHAPE;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 139 "../../src-common/cfdg.l"
{return token::LOOP;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 140 "../../src-common/cfdg.l"
{return token::CLONE;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 141 "../../src-common/cfdg.l"
{return token::LET;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 142 "../../src-common/cfdg.l"
{return token::BECOMES;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 143 "../../src-common/cfdg.l"
{return token::FINALLY;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 144 "../../src-common/cfdg.l"
{return token::IF;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 145 "../../src-common/cfdg.l"
{return token::ELSE;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 146 "../../src-common/cfdg.l"
{return token::SWITCH;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 147 "../../src-common/cfdg.l"
{return token::CASE;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 148 "../../src-common/cfdg.l"
{return token::RANGEOP;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 149 "../../src-common/cfdg.l"
{return token::RANGEOP;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 150 "../../src-common/cfdg.l"
{return token::PLUSMINUSOP;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 151 "../../src-common/cfdg.l"
{return token::PLUSMINUSOP;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 152 "../../src-common/cfdg.l"
{return token::CF_INFINITY;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 154 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::time;          return token::MODTYPE;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 155 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::timescale;     return token::MODTYPE;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 156 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::rot;           return token::MODTYPE;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 157 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::rot;           return token::MODTYPE;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 158 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::flip;          return token::MODTYPE;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 159 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::flip;          return token::MODTYPE;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 160 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::blend;         return token::MODTYPE;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 161 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::hue;           return token::MODTYPE;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 162 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::hue;           return token::MODTYPE;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 163 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::sat;           return token::MODTYPE;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 164 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::sat;           return token::MODTYPE;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 165 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::bright;        return token::MODTYPE;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 166 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::bright;        return token::MODTYPE;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 167 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::alpha;         return token::MODTYPE;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 168 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::alpha;         return token::MODTYPE;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 169 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::transform;     return token::MODTYPE;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 170 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::transform;     return token::MODTYPE;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 171 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::x;             return token::MODTYPE;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 172 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::y;             return token::MODTYPE;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 173 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::z;             return token::MODTYPE;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 174 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::size;          return token::MODTYPE;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 175 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::size;          return token::MODTYPE;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 176 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::skew;          return token::MODTYPE;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 177 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::targHue;       return token::MODTYPE;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 178 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::targHue;       return token::MODTYPE;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 179 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::targSat;       return token::MODTYPE;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 180 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::targSat;       return token::MODTYPE;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 181 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::targBright;    return token::MODTYPE;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 182 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::targBright;    return token::MODTYPE;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 183 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::targAlpha;     return token::MODTYPE;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 184 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::targAlpha;     return token::MODTYPE;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 186 "../../src-common/cfdg.l"
{ return v2token(yylval, AST::ASTmodTerm::param); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 187 "../../src-common/cfdg.l"
{ return v2token(yylval, AST::ASTmodTerm::param); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 188 "../../src-common/cfdg.l"
{ return v2token(yylval, AST::ASTmodTerm::stroke); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 189 "../../src-common/cfdg.l"
{ return v2token(yylval, AST::ASTmodTerm::x1); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 190 "../../src-common/cfdg.l"
{ return v2token(yylval, AST::ASTmodTerm::y1); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 191 "../../src-common/cfdg.l"
{ return v2token(yylval, AST::ASTmodTerm::x2); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 192 "../../src-common/cfdg.l"
{ return v2token(yylval, AST::ASTmodTerm::y2); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 193 "../../src-common/cfdg.l"
{ return v2token(yylval, AST::ASTmodTerm::xrad); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 194 "../../src-common/cfdg.l"
{ return v2token(yylval, AST::ASTmodTerm::yrad); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 196 "../../src-common/cfdg.l"
{ return token::LT; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 197 "../../src-common/cfdg.l"
{ return token::LE; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 198 "../../src-common/cfdg.l"
{ return token::LE; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 199 "../../src-common/cfdg.l"
{ return token::GT; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 200 "../../src-common/cfdg.l"
{ return token::GE; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 201 "../../src-common/cfdg.l"
{ return token::GE; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 202 "../../src-common/cfdg.l"
{ return token::EQ; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 203 "../../src-common/cfdg.l"
{ return token::NEQ; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 204 "../../src-common/cfdg.l"
{ return token::NEQ; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 205 "../../src-common/cfdg.l"
{ return token::NOT; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 206 "../../src-common/cfdg.l"
{ return token::AND; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 207 "../../src-common/cfdg.l"
{ return token::OR; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 208 "../../src-common/cfdg.l"
{ return token::XOR; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 209 "../../src-common/cfdg.l"
{ return '_'; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 211 "../../src-common/cfdg.l"
{yylval->string = new std::string(yytext); return token::USER_PATHOP;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 212 "../../src-common/cfdg.l"
{
    // This greedy string regex gobbles up all Unicode characters, including the
    // Unicode operators. Look for Unicode operators in the string and chop
    // it at the first one found.
    auto greedy = std::make_unique<std::string>(yytext);
    auto pos = std::string::npos;
    auto tok = token::USER_STRING;
    for (auto&& tokenEntry: utf8chars) {
        auto spos = greedy->find(tokenEntry.second);
        if (spos != std::string::npos && (pos == std::string::npos || spos < pos)) {
            pos = spos;
            tok = tokenEntry.first;
        }
    }
    
    if (pos == 0) {
        // Unicode operator found at 1st char, Unread all but the operator and
        // return the token for the operator (and delete greedy).
        int len = static_cast<int>(std::strlen(utf8chars.at(tok))); // never throws
        (yylloc->end) = (yylloc->begin);
#ifdef RAW_UTF8_LENGTH
        yylloc->columns(len);
#else
        yylloc->columns(1);
#endif
        yyless(len);
        return tok;
    }

    int c = YY_NULL;
    
    if (pos != std::string::npos) {         // An operator was gobbled up
        greedy->resize(pos);                // Chop string at operator
        (yylloc->end) = (yylloc->begin);    // Fix location end
        yylloc->columns(utf8length(yytext, pos));
        yyless(static_cast<int>(pos));      // Return chopped text to lex buffer
    } else {
        c = yyinput();                      // Oherwise, peek at next character
    }
    
    if (c != YY_NULL) unput(c);             // Undo the peek
    yylval->string = greedy.release();
    return c == '[' ? token::USER_ARRAYNAME : token::USER_STRING;
}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 256 "../../src-common/cfdg.l"
{yylval->string = new std::string(yytext); return token::USER_RATIONAL;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 257 "../../src-common/cfdg.l"
{yylval->string = new std::string(yytext); return token::USER_RATIONAL;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 258 "../../src-common/cfdg.l"
{
    yylval->string = new std::string(yytext, yyleng - 2);
    yyless(yyleng - 2);
    (yylloc->end) += -2;
    return token::USER_RATIONAL;
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 264 "../../src-common/cfdg.l"
{yylval->string = new std::string(yytext); return token::USER_RATIONAL;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 265 "../../src-common/cfdg.l"
{yylval->string = new std::string(yytext); return token::USER_FILENAME;}
	YY_BREAK
/* gobble up white-spaces */
case 87:
YY_RULE_SETUP
#line 268 "../../src-common/cfdg.l"
{
    yylloc->step();
}
	YY_BREAK
/* gobble up end-of-lines */
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 273 "../../src-common/cfdg.l"
{
    yylloc->lines(1); yylloc->step();
}
	YY_BREAK
/* pass all other characters up to bison */
case 89:
YY_RULE_SETUP
#line 278 "../../src-common/cfdg.l"
{
    return static_cast<int>(*yytext);
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 282 "../../src-common/cfdg.l"
{
    if (!YY_CURRENT_BUFFER)
        yyterminate();
    if (!mLocationStack.empty()) {
        *yylloc = mLocationStack.top();
        mLocationStack.pop();
    }
    yylloc->step();
    return token::GOODEOF;
}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 293 "../../src-common/cfdg.l"
ECHO;
	YY_BREAK
#line 1658 "lex.yy.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return static_cast<int>(yyin.gcount());
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 305 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 305 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 304);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 293 "../../src-common/cfdg.l"


namespace yy {

const Scanner::tokenMap Scanner::utf8chars = {
    {token::RANGEOP,        "\xe2\x80\xa6"},
    {token::PLUSMINUSOP,    "\xc2\xb1"},
    {token::LE,             "\xe2\x89\xa4"},
    {token::GE,             "\xe2\x89\xa5"},
    {token::NEQ,            "\xe2\x89\xa0"},
    {token::CF_INFINITY,    "\xe2\x88\x9e"}
};

Scanner::Scanner(std::istream* in, std::ostream* out)
    : yyFlexLexer(in, out)
{}

Scanner::~Scanner()
{
}

void Scanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

void Scanner::LexerError(const char* msg) 
{
    driver->error(lineno(), msg);
}
    
void Scanner::setupLoc(CfdgParser::location_type* yylloc)
{
    switch (nextLocAction) {
        case normalAction:
        case popLoc:
            yylloc->step();
            break;
        case pushLoc:
            mLocationStack.push(*yylloc);
            *yylloc = CfdgParser::location_type();
            break;
    }
    nextLocAction = normalAction;
    yylloc->begin.filename = yylloc->end.filename = driver->m_currentPath;
}

// Compute the number of Unicode characters in a block of UTF-8 encoded bytes
unsigned int Scanner::utf8length(const char* txt, std::size_t len)
{
    unsigned int length = 0;
    for (std::size_t i = 0; i < len; ++i, ++length) {
        unsigned char c = static_cast<unsigned char>(txt[i]);
        if (c == '\0')
            LexerError("Invalid UTF-8 encoding: ASCII null character");
        if ((c & 0x80) == 0) continue;
        std::size_t j = 0;
        for (; c & 0x80; ++j)
            c <<= 1;
        
        if (j == 1) {
            LexerError("Invalid UTF-8 encoding: unexpected continuation byte");
            continue;
        }
        
        if (j > 4)      // 4 bytes max per RFC 3629
            LexerError("Invalid UTF-8 encoding: code point out of range");
        
        if (j && i + j > len) {
            LexerError("Invalid UTF-8 encoding: sequence extends past end of buffer");
            return length;
        }
        
        // Compute the Unicode code point
        unsigned long code = (c & 0x7f) >> j;
        std::size_t k = 1;
        for (; k < j; ++k) {
            if ((txt[i + k] & 0xc0) != 0x80) {
                LexerError("Invalid UTF-8 encoding: expecting a continuation byte");
                break;
            }
            code = (code << 6) | (txt[i + k] & 0x3f);
        }
        if (k < j) {
            // malformed code is actually k bytes long, not j bytes long
            i += k - 1;
            continue;
        }
        
        // Check for illegal code points
        if (code >= 0xd800 && code <= 0xdfff)
            LexerError("Invalid UTF-8 encoding: UTF-16 surrogate halves");
        if (code == 0xfffe || code == 0xffff)
            LexerError("Invalid UTF-8 encoding: illegal code point");
        if (code == 0)
            LexerError("Invalid UTF-8 encoding: encoded null character");
        if (code > 0x10ffff)
            LexerError("Invalid UTF-8 encoding: codepoint above U+10FFFF");
        
        // Check for encodings that are more bytes than they need to be
        switch (j) {
            case 2:
                if (code > 0x7f) break;
		FALLTHROUGH;
            case 3:
                if (code > 0x7ff) break;
		FALLTHROUGH;
            case 4:
                if (code > 0xffff) break;
                LexerError("Invalid UTF-8 encoding: overlong sequence");
            default:
                break;
        }
        if (j)
            i += j - 1;
    }
#ifdef RAW_UTF8_LENGTH
    // Check UTF-8 encoding but return raw length
    return static_cast<unsigned int>(len);
#else
    // Return number of code points
    return length;
#endif
}

token_type Scanner::v2token(CfdgParser::semantic_type* yylval,
                            AST::ASTmodTerm::modTypeEnum mod)
{
    if (startToken == token::CFDG2) {
        yylval->modToken = mod;
        return mod == AST::ASTmodTerm::param ? token::PARAM : token::MODTYPE;
    } else {
        yylval->string = new std::string(yytext);
        return token::USER_STRING;
    }
}

}   // namespace yy

/* This implementation of CfdgFlexLexer::yylex() is required to fill the
 * vtable of the class CfdgFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif

int yyFlexLexer::yylex()
{
    std::cerr << "in yyFlexLexer::yylex() !" << std::endl;
    return 0;
}


