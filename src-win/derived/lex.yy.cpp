#line 2 "lex.yy.cpp"

#line 4 "lex.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer CfdgFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *Cfdgalloc (yy_size_t  );
void *Cfdgrealloc (void *,yy_size_t  );
void Cfdgfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 84
#define YY_END_OF_BUFFER 85
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[275] =
    {   0,
        0,    0,   85,   83,   81,   82,   70,   83,    1,   83,
       83,   83,   83,   83,   79,   61,   13,   64,   76,   76,
       76,   76,   76,   83,   76,   35,   33,   76,   76,   27,
       29,   76,   76,   59,   25,   48,   76,   76,   42,   43,
       46,   83,   83,   76,   81,    0,    3,   71,    0,   74,
       19,   77,    2,    1,   79,   77,   79,   62,   68,   67,
       65,    0,    0,   76,   76,   76,    0,   76,   76,   76,
       76,   73,    0,   76,   76,   76,   76,   76,   76,   76,
       76,   15,   76,   76,   76,   76,   76,   76,   44,   45,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   36,

       38,   37,   39,   57,   55,   51,    0,   72,   20,   76,
       21,   77,    0,   77,   78,   77,    0,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   28,
       76,   76,   76,   76,   76,   76,   76,   31,   76,   76,
       76,   76,   76,   76,   76,   76,   76,    0,    0,    0,
        0,   69,   63,   66,    0,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   18,   16,   76,   26,   76,   76,
       12,   76,   10,   76,    9,   76,   76,   47,   49,   76,
       76,    8,   22,   76,   76,    0,    0,   50,   53,    0,
       76,   75,   76,   76,   76,   76,   76,   76,   34,   76,

       76,   76,   76,   76,   58,   76,   76,   11,   76,   76,
       76,   41,   60,    0,    0,    0,   80,   76,   76,   76,
       76,   76,   76,   76,   76,    7,   76,   24,   76,   76,
       17,   76,   76,   56,    0,    0,   76,   76,   76,   76,
       14,    6,   76,   76,   76,   76,    0,    0,   76,   76,
       76,   76,   76,   76,   76,    0,    0,   76,   76,   76,
       76,   23,   40,    0,    0,    5,   32,   30,    4,    0,
        0,   54,   52,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    8,    1,    1,
        1,    9,   10,    1,   11,   12,   13,   14,   15,   16,
       14,   14,   14,   14,   14,   14,   14,   17,    1,   18,
       19,   20,    1,    1,   21,   22,   23,   22,   24,   22,
       22,   22,   25,   22,   22,   26,   27,   28,   29,   30,
       22,   31,   32,   33,   34,   35,   22,   22,   36,   22,
        1,    1,    1,   37,   38,    1,   39,   40,   41,   42,

       43,   44,   45,   46,   47,   22,   48,   49,   50,   51,
       52,   53,   22,   54,   55,   56,   57,   22,   58,   59,
       60,   61,    1,   62,    1,    1,    1,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   64,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   65,
       63,   63,   63,   66,   67,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   68,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   69,   63,   63,   63,   63,   63,   63,

       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   70,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63
    } ;

static yyconst flex_int32_t yy_meta[71] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,    2,    1,    3,    3,    3,    4,    1,    1,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    1,    3,    3,    3,    3,    3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[279] =
    {   0,
        0,    0,  252, 1453,  249, 1453, 1453,   68, 1453,  235,
      228,  229,   60,   68,   71,   60,  220,  218,   77,   79,
       81,   88,   92,  196,  155,  100,  108,  112,  115,  119,
      122,  142,  126,  159,  163,  188,  191,  195,  202,  214,
      236,  210,   72,  250,  219,   92, 1453, 1453,  205, 1453,
     1453,  259, 1453, 1453,  198,  270,  280, 1453, 1453, 1453,
     1453,  197,   94,  286,  135,  289,  257,  296,  298,  319,
      321, 1453,  276,  340,  337,  349,  352,  359,  362,  369,
      372,  380,  383,  391,  387,  408,  412,  423,  400,  431,
      433,  446,  442,  454,  462,  471,  479,  482,  493,  495,

      497,  505,  508,  152,  143,  139,  155, 1453,  178,  515,
     1453, 1453,  175, 1453, 1453,  274,   70,  522,  525,  532,
      535,  559,  561,  575,  586,  578,  594,  597,  601,  605,
      608,  615,  622,  629,  639,  641,  650,  631,  661,  670,
      678,  690,  692,  694,  706,  704,  714,  132,  136,  139,
      117,  716,  723,  734,  110,  741,  745,  755,  765,  769,
      776,  779,  787,  794,  804,  808,  811,  818,  825,  832,
      835,  842,  850,  853,  857,  864,  871,  873,  885,  888,
      895,  904,  912,  920,  934,  126,  122, 1453,  108,  144,
      936,  938,  948,  957,  959,  975,  982,  984,  997, 1004,

     1007, 1018, 1021, 1028, 1025, 1035, 1043, 1045, 1063, 1074,
     1072, 1081, 1084,  124,  114,  104,  143, 1088, 1091, 1099,
     1110, 1112, 1122, 1134, 1137, 1144, 1147, 1154, 1158, 1161,
     1165, 1172, 1176, 1453,   89,  105, 1183, 1193, 1209, 1220,
     1227, 1231, 1238, 1242, 1253, 1256,   91,   85, 1263, 1265,
     1275, 1286, 1297, 1306, 1309,   85,   71, 1316, 1324, 1331,
     1328, 1335, 1345,   61,   58, 1352, 1356, 1369, 1372,   47,
       50, 1453, 1453, 1453, 1441, 1444, 1446, 1449
    } ;

static yyconst flex_int16_t yy_def[279] =
    {   0,
      274,    1,  274,  274,  274,  274,  274,  275,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  276,  276,
      276,  276,  276,  274,  277,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  274,  278,  276,  274,  275,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  278,  278,  276,  277,  276,  278,  276,  276,  276,
      276,  274,  274,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,

      276,  276,  276,  274,  274,  274,  274,  274,  278,  276,
      274,  274,  274,  274,  274,  274,  278,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  274,  274,  274,
      274,  276,  276,  276,  278,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  274,  274,  274,  274,  278,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,

      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  274,  274,  274,  278,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  274,  274,  274,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  274,  274,  276,  276,
      276,  276,  276,  276,  276,  274,  274,  276,  276,  276,
      276,  276,  276,  274,  274,  276,  276,  276,  276,  274,
      274,  274,  274,    0,  274,  274,  274,  274
    } ;

static yyconst flex_int16_t yy_nxt[1524] =
    {   0,
        4,    5,    6,    7,    8,    9,    4,   10,    4,   11,
       12,   13,   14,   15,   15,   15,    4,   16,   17,   18,
       19,   20,   21,   20,   20,   22,   23,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   24,   25,   26,   27,
       28,   20,   29,   30,   20,   31,   32,   20,   33,   20,
       20,   20,   34,   35,   36,   37,   20,   38,   39,   40,
       41,   42,   20,   20,   20,   20,   20,   20,   43,   44,
       47,   51,   47,   52,   52,   52,   53,   55,   58,   59,
       54,   63,   56,   63,   57,   57,   57,   62,   63,   62,
       63,   62,   63,   65,   47,   65,   47,   65,   62,   63,

      273,  272,   62,   63,   65,   63,   68,   66,   65,  271,
       62,   63,   70,  155,   69,  270,   65,  265,   62,   63,
       71,   63,   62,   63,   65,   62,   63,  264,   65,   62,
       63,   65,   62,   63,  117,   65,   62,   63,   65,  109,
      257,  256,   65,  248,  247,   67,   75,   67,   74,   67,
       77,  190,   62,   63,   63,   63,   67,  236,   65,  235,
       67,   76,  234,   78,  216,   79,  215,   80,   67,   62,
       63,  214,  189,   62,   63,   65,   67,   85,   81,   65,
       67,  188,  187,   67,  186,   82,  115,   67,  217,   63,
       67,   83,   84,  151,   67,  150,  149,   86,   62,   63,

      148,   62,   63,   73,   65,   62,   63,   65,   63,  113,
       67,   65,   62,   63,   87,  111,  100,  101,   65,   88,
       45,   89,   90,   73,   62,   63,   91,   67,  102,  103,
       65,   67,   72,   92,   93,   94,   61,   97,   60,   50,
       49,   99,   48,   95,   98,   96,   62,   63,  104,  105,
       45,  274,   65,  274,  274,  106,   67,  274,  274,   67,
       62,   63,  274,   67,  107,  112,   65,  274,   63,  274,
       67,  108,   52,   52,   52,  274,  114,  274,  274,  274,
      114,  115,   67,  116,  116,  116,   55,  116,  116,  116,
      274,   56,  274,   57,   57,   57,   62,   63,  274,   62,

       63,  274,   65,  274,   67,   65,   62,   63,   62,   63,
      274,  118,   65,  110,   65,  274,  274,  274,   67,   64,
       64,   64,   64,   64,  119,   64,   64,  274,  120,   62,
       63,   62,   63,  274,  274,   65,  274,   65,   65,   65,
       65,   65,   65,  274,   65,   65,  121,   62,   63,  274,
       62,   63,  274,   65,   67,  122,   65,   67,  274,   62,
       63,  274,   62,   63,   67,   65,   67,  274,   65,   62,
       63,  274,   62,   63,  274,   65,  274,  124,   65,   62,
       63,  274,   62,   63,  274,   65,  274,   67,   65,   67,
       62,   63,  123,   62,   63,  125,   65,   62,   63,   65,

      274,   62,   63,   65,  274,   67,  126,   65,   67,  274,
       62,   63,  128,  127,  130,  129,   65,   67,   62,   63,
       67,  274,   62,   63,   65,  274,  274,   67,   65,  274,
       67,  132,  274,   62,   63,  131,  274,   67,  133,   65,
       67,   62,   63,   62,   63,  274,  274,   65,   67,   65,
      274,   67,   62,   63,  274,   67,   62,   63,   65,   67,
      274,  134,   65,  135,   62,   63,  274,  136,   67,  274,
       65,  137,   62,   63,  274,  274,   67,  274,   65,  274,
       67,   62,   63,  274,  139,  274,  274,   65,  138,   62,
       63,   67,   62,   63,  274,   65,  141,  274,   65,   67,

      142,   67,  140,   62,   63,   62,   63,   62,   63,   65,
       67,   65,  274,   65,   67,   62,   63,  143,   62,   63,
      146,   65,   67,  274,   65,   62,   63,  144,  145,  274,
       67,   65,   62,   63,  147,   62,   63,  274,   65,   67,
      274,   65,   62,   63,  274,   62,   63,   67,   65,  274,
       67,   65,  156,  274,  157,  274,  158,  274,  160,  274,
      274,   67,  274,   67,  274,   67,  159,  274,  274,   62,
       63,   62,   63,   67,  274,   65,   67,   65,  274,  152,
      153,  154,  161,   67,  274,   62,   63,  274,   62,   63,
       67,   65,  274,   67,   65,  274,   62,   63,  274,  274,

       67,  274,   65,   67,   62,   63,  162,   62,   63,  274,
       65,   62,   63,   65,  274,   62,   63,   65,   62,   63,
      165,   65,  163,  274,   65,   62,   63,   67,  274,   67,
      164,   65,   62,   63,  274,  167,  166,  274,   65,   62,
       63,   62,   63,   67,  274,   65,   67,   65,  274,   62,
       63,   62,   63,  168,   67,   65,  274,   65,  274,  169,
       62,   63,   67,  170,  274,   67,   65,  172,  274,   67,
      274,   62,   63,   67,  171,  274,   67,   65,  274,  174,
       62,   63,  274,   67,  173,  274,   65,  176,   62,   63,
       67,  274,  175,  274,   65,  274,  274,   67,  274,   67,

       62,   63,   62,   63,   62,   63,   65,   67,   65,   67,
       65,  274,  178,  177,   62,   63,   62,   63,   67,  274,
       65,  274,   65,  274,   62,   63,   62,   63,  274,   67,
       65,  274,   65,   62,   63,  179,  182,  274,   67,   65,
      274,  274,  274,  180,   62,   63,   67,  181,  183,  274,
       65,   62,   63,  274,  184,   62,   63,   65,   67,  274,
       67,   65,   67,  274,  191,   62,   63,  274,  274,  185,
      274,   65,   67,  192,   67,   62,   63,  274,  193,   62,
       63,   65,   67,  274,   67,   65,   62,   63,  194,   62,
       63,   67,   65,  274,  274,   65,  274,   62,   63,  195,

      274,  196,   67,   65,   62,   63,  197,  274,  198,   67,
       65,  274,  274,   67,   62,   63,  274,  199,   62,   63,
       65,   62,   63,   67,   65,  274,  274,   65,   62,   63,
      274,  200,  274,   67,   65,   62,   63,   67,  274,  201,
      274,   65,   62,   63,   67,   62,   63,   67,   65,  274,
      274,   65,   62,   63,  274,   67,  274,  274,   65,  202,
       62,   63,   67,   62,   63,  274,   65,   62,   63,   65,
      274,  274,   67,   65,   62,   63,   67,  274,  203,   67,
       65,   62,   63,   62,   63,  274,   67,   65,  204,   65,
      274,  205,  274,   67,  274,   62,   63,  274,   62,   63,

       67,   65,  274,   67,   65,   62,   63,  274,  206,  274,
       67,   65,  274,  208,   62,   63,  274,  207,   67,  274,
       65,   67,   62,   63,  274,   67,  274,  274,   65,  274,
       62,   63,   67,  274,  274,  210,   65,  274,  274,   67,
      274,   67,  274,  209,   62,   63,   62,   63,   62,   63,
       65,  274,   65,   67,   65,  274,   67,  274,   62,   63,
      274,  192,  274,   67,   65,  274,  211,   62,   63,   62,
       63,  274,   67,   65,  212,   65,  274,  218,  274,  213,
       67,  274,  221,  274,  274,   62,   63,  219,   67,  220,
      274,   65,   62,   63,   62,   63,  274,  274,   65,  274,

       65,  274,   67,  192,   67,  222,   67,   62,   63,  274,
      274,  274,  192,   65,   62,   63,   67,   62,   63,  274,
       65,  274,  274,   65,  274,   67,  274,   67,   62,   63,
      274,   62,   63,  274,   65,   62,   63,   65,   62,   63,
      274,   65,  274,   67,   65,   62,   63,  274,  274,  274,
       67,   65,   67,   62,   63,   62,   63,  223,  274,   65,
      274,   65,  224,  274,  274,   67,  225,  274,  274,  227,
      274,  274,   67,   62,   63,   67,  226,  228,  274,   65,
      274,  229,   62,   63,   62,   63,   67,  274,   65,   67,
       65,   62,   63,   67,   62,   63,   67,   65,   62,   63,

       65,   62,   63,   67,   65,  274,  274,   65,  274,   62,
       63,   67,  232,   67,  238,   65,  237,  230,  274,  231,
       62,   63,   62,   63,  233,  274,   65,  192,   65,  274,
      274,   67,   62,   63,  274,  192,  274,  192,   65,  274,
       67,  274,   67,  274,   62,   63,  274,   62,   63,   67,
       65,  274,   67,   65,   62,   63,   67,   62,   63,   67,
       65,  274,  274,   65,   62,   63,  274,   67,   62,   63,
       65,   62,   63,  239,   65,   62,   63,   65,   67,  274,
       67,   65,   62,   63,  240,  274,   62,   63,   65,  242,
       67,  274,   65,   62,   63,  274,  241,  274,  274,   65,

      274,  274,   67,   62,   63,   67,  244,  274,  249,   65,
      245,  274,   67,  243,  274,   67,  274,  274,  192,   62,
       63,  274,   67,  274,  274,   65,   67,  246,  274,   67,
       62,   63,  274,   67,  274,  274,   65,   62,   63,  274,
       67,   62,   63,   65,   67,  274,  274,   65,   62,   63,
      274,   67,   62,   63,   65,  274,  274,  274,   65,  274,
      274,   67,  251,   62,   63,  250,   62,   63,  274,   65,
      274,  274,   65,   62,   63,   62,   63,   67,  274,   65,
      253,   65,  274,  274,  252,   62,   63,  274,   67,  274,
      274,   65,  274,  274,  274,   67,   62,   63,  192,   67,

      274,  254,   65,  274,  274,  274,   67,   62,   63,  255,
       67,  274,  274,   65,  274,  258,   62,   63,  274,   62,
       63,   67,   65,  274,   67,   65,   62,   63,  274,  259,
      274,   67,   65,   67,   62,   63,  274,  260,   62,   63,
       65,   62,   63,   67,   65,   62,   63,   65,  262,  261,
      274,   65,  274,  274,   67,   62,   63,  266,  263,  274,
      274,   65,   62,   63,  274,   67,   62,   63,   65,  274,
      269,  274,   65,  274,   67,  274,  274,   67,  267,   62,
       63,  268,   62,   63,   67,   65,  274,  274,   65,  274,
      274,  274,   67,  274,  274,  274,   67,  274,  274,   67,

      274,  274,  274,   67,  274,  274,  274,  274,  274,  274,
      274,  274,  274,   67,  274,  274,  274,  274,  274,  274,
       67,  274,  274,  274,   67,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,   67,  274,  274,
       67,   46,   46,   46,   46,   64,   64,   64,   65,   65,
       62,   62,    3,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,

      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274
    } ;

static yyconst flex_int16_t yy_chk[1524] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        8,   13,    8,   13,   13,   13,   14,   15,   16,   16,
       14,  117,   15,   43,   15,   15,   15,   19,   19,   20,
       20,   21,   21,   19,   46,   20,   46,   21,   22,   22,

      271,  270,   23,   23,   22,   63,   21,   19,   23,  265,
       26,   26,   22,  117,   21,  264,   26,  257,   27,   27,
       23,  155,   28,   28,   27,   29,   29,  256,   28,   30,
       30,   29,   31,   31,   63,   30,   33,   33,   31,   43,
      248,  247,   33,  236,  235,   19,   27,   20,   26,   21,
       28,  155,   32,   32,  217,  190,   22,  216,   32,  215,
       23,   27,  214,   29,  189,   30,  187,   30,   26,   34,
       34,  186,  151,   35,   35,   34,   27,   33,   31,   35,
       28,  150,  149,   29,  148,   32,  113,   30,  190,  109,
       31,   32,   32,  107,   33,  106,  105,   34,   36,   36,

      104,   37,   37,   65,   36,   38,   38,   37,   62,   55,
       32,   38,   39,   39,   35,   49,   39,   39,   39,   35,
       45,   35,   35,   25,   40,   40,   36,   34,   40,   40,
       40,   35,   24,   36,   36,   36,   18,   37,   17,   12,
       11,   38,   10,   36,   37,   36,   41,   41,   42,   42,
        5,    3,   41,    0,    0,   42,   36,    0,    0,   37,
       44,   44,    0,   38,   42,   52,   44,    0,   67,    0,
       39,   42,   52,   52,   52,    0,   56,    0,    0,    0,
      116,   56,   40,   56,   56,   56,   57,  116,  116,  116,
        0,   57,    0,   57,   57,   57,   64,   64,    0,   66,

       66,    0,   64,    0,   41,   66,   68,   68,   69,   69,
        0,   66,   68,   44,   69,    0,    0,    0,   44,   67,
       67,   67,   67,   67,   68,   67,   67,    0,   69,   70,
       70,   71,   71,    0,    0,   70,    0,   71,   73,   73,
       73,   73,   73,    0,   73,   73,   70,   75,   75,    0,
       74,   74,    0,   75,   64,   71,   74,   66,    0,   76,
       76,    0,   77,   77,   68,   76,   69,    0,   77,   78,
       78,    0,   79,   79,    0,   78,    0,   75,   79,   80,
       80,    0,   81,   81,    0,   80,    0,   70,   81,   71,
       82,   82,   74,   83,   83,   76,   82,   85,   85,   83,

        0,   84,   84,   85,    0,   75,   77,   84,   74,    0,
       89,   89,   79,   78,   81,   80,   89,   76,   86,   86,
       77,    0,   87,   87,   86,    0,    0,   78,   87,    0,
       79,   84,    0,   88,   88,   83,    0,   80,   85,   88,
       81,   90,   90,   91,   91,    0,    0,   90,   82,   91,
        0,   83,   93,   93,    0,   85,   92,   92,   93,   84,
        0,   86,   92,   86,   94,   94,    0,   87,   89,    0,
       94,   88,   95,   95,    0,    0,   86,    0,   95,    0,
       87,   96,   96,    0,   92,    0,    0,   96,   91,   97,
       97,   88,   98,   98,    0,   97,   94,    0,   98,   90,

       95,   91,   93,   99,   99,  100,  100,  101,  101,   99,
       93,  100,    0,  101,   92,  102,  102,   96,  103,  103,
       98,  102,   94,    0,  103,  110,  110,   97,   97,    0,
       95,  110,  118,  118,   99,  119,  119,    0,  118,   96,
        0,  119,  120,  120,    0,  121,  121,   97,  120,    0,
       98,  121,  118,    0,  118,    0,  119,    0,  121,    0,
        0,   99,    0,  100,    0,  101,  120,    0,    0,  122,
      122,  123,  123,  102,    0,  122,  103,  123,    0,  110,
      110,  110,  122,  110,    0,  124,  124,    0,  126,  126,
      118,  124,    0,  119,  126,    0,  125,  125,    0,    0,

      120,    0,  125,  121,  127,  127,  123,  128,  128,    0,
      127,  129,  129,  128,    0,  130,  130,  129,  131,  131,
      126,  130,  124,    0,  131,  132,  132,  122,    0,  123,
      125,  132,  133,  133,    0,  128,  127,    0,  133,  134,
      134,  138,  138,  124,    0,  134,  126,  138,    0,  135,
      135,  136,  136,  129,  125,  135,    0,  136,    0,  131,
      137,  137,  127,  132,    0,  128,  137,  134,    0,  129,
        0,  139,  139,  130,  133,    0,  131,  139,    0,  136,
      140,  140,    0,  132,  135,    0,  140,  138,  141,  141,
      133,    0,  137,    0,  141,    0,    0,  134,    0,  138,

      142,  142,  143,  143,  144,  144,  142,  135,  143,  136,
      144,    0,  140,  139,  146,  146,  145,  145,  137,    0,
      146,    0,  145,    0,  147,  147,  152,  152,    0,  139,
      147,    0,  152,  153,  153,  141,  144,    0,  140,  153,
        0,    0,    0,  142,  154,  154,  141,  143,  145,    0,
      154,  156,  156,    0,  146,  157,  157,  156,  142,    0,
      143,  157,  144,    0,  156,  158,  158,    0,    0,  147,
        0,  158,  146,  157,  145,  159,  159,    0,  158,  160,
      160,  159,  147,    0,  152,  160,  161,  161,  159,  162,
      162,  153,  161,    0,    0,  162,    0,  163,  163,  160,

        0,  160,  154,  163,  164,  164,  161,    0,  161,  156,
      164,    0,    0,  157,  165,  165,    0,  162,  166,  166,
      165,  167,  167,  158,  166,    0,    0,  167,  168,  168,
        0,  163,    0,  159,  168,  169,  169,  160,    0,  164,
        0,  169,  170,  170,  161,  171,  171,  162,  170,    0,
        0,  171,  172,  172,    0,  163,    0,    0,  172,  167,
      173,  173,  164,  174,  174,    0,  173,  175,  175,  174,
        0,    0,  165,  175,  176,  176,  166,    0,  169,  167,
      176,  177,  177,  178,  178,    0,  168,  177,  170,  178,
        0,  172,    0,  169,    0,  179,  179,    0,  180,  180,

      170,  179,    0,  171,  180,  181,  181,    0,  174,    0,
      172,  181,    0,  177,  182,  182,    0,  176,  173,    0,
      182,  174,  183,  183,    0,  175,    0,    0,  183,    0,
      184,  184,  176,    0,    0,  181,  184,    0,    0,  177,
        0,  178,    0,  180,  185,  185,  191,  191,  192,  192,
      185,    0,  191,  179,  192,    0,  180,    0,  193,  193,
        0,  191,    0,  181,  193,    0,  183,  194,  194,  195,
      195,    0,  182,  194,  184,  195,    0,  193,    0,  185,
      183,    0,  195,    0,    0,  196,  196,  194,  184,  194,
        0,  196,  197,  197,  198,  198,    0,    0,  197,    0,

      198,    0,  185,  196,  191,  197,  192,  199,  199,    0,
        0,    0,  198,  199,  200,  200,  193,  201,  201,    0,
      200,    0,    0,  201,    0,  194,    0,  195,  202,  202,
        0,  203,  203,    0,  202,  205,  205,  203,  204,  204,
        0,  205,    0,  196,  204,  206,  206,    0,    0,    0,
      197,  206,  198,  207,  207,  208,  208,  200,    0,  207,
        0,  208,  201,    0,    0,  199,  202,    0,    0,  204,
        0,    0,  200,  209,  209,  201,  203,  206,    0,  209,
        0,  207,  211,  211,  210,  210,  202,    0,  211,  203,
      210,  212,  212,  205,  213,  213,  204,  212,  218,  218,

      213,  219,  219,  206,  218,    0,    0,  219,    0,  220,
      220,  207,  211,  208,  219,  220,  218,  209,    0,  210,
      221,  221,  222,  222,  212,    0,  221,  220,  222,    0,
        0,  209,  223,  223,    0,  221,    0,  222,  223,    0,
      211,    0,  210,    0,  224,  224,    0,  225,  225,  212,
      224,    0,  213,  225,  226,  226,  218,  227,  227,  219,
      226,    0,    0,  227,  228,  228,    0,  220,  229,  229,
      228,  230,  230,  223,  229,  231,  231,  230,  221,    0,
      222,  231,  232,  232,  224,    0,  233,  233,  232,  227,
      223,    0,  233,  237,  237,    0,  225,    0,    0,  237,

        0,    0,  224,  238,  238,  225,  230,    0,  237,  238,
      232,    0,  226,  229,    0,  227,    0,    0,  238,  239,
      239,    0,  228,    0,    0,  239,  229,  233,    0,  230,
      240,  240,    0,  231,    0,    0,  240,  241,  241,    0,
      232,  242,  242,  241,  233,    0,    0,  242,  243,  243,
        0,  237,  244,  244,  243,    0,    0,    0,  244,    0,
        0,  238,  240,  245,  245,  239,  246,  246,    0,  245,
        0,    0,  246,  249,  249,  250,  250,  239,    0,  249,
      244,  250,    0,    0,  243,  251,  251,    0,  240,    0,
        0,  251,    0,    0,    0,  241,  252,  252,  249,  242,

        0,  245,  252,    0,    0,    0,  243,  253,  253,  246,
      244,    0,    0,  253,    0,  250,  254,  254,    0,  255,
      255,  245,  254,    0,  246,  255,  258,  258,    0,  251,
        0,  249,  258,  250,  259,  259,    0,  252,  261,  261,
      259,  260,  260,  251,  261,  262,  262,  260,  254,  253,
        0,  262,    0,    0,  252,  263,  263,  258,  255,    0,
        0,  263,  266,  266,    0,  253,  267,  267,  266,    0,
      261,    0,  267,    0,  254,    0,    0,  255,  259,  268,
      268,  260,  269,  269,  258,  268,    0,    0,  269,    0,
        0,    0,  259,    0,    0,    0,  261,    0,    0,  260,

        0,    0,    0,  262,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  263,    0,    0,    0,    0,    0,    0,
      266,    0,    0,    0,  267,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  268,    0,    0,
      269,  275,  275,  275,  275,  276,  276,  276,  277,  277,
      278,  278,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,

      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[85] =
    {   0,
0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../../src-common/cfdg.l"
/* cfdg.l
// this file is part of Context Free
// ---------------------
// Copyright (C) 2005-2008 Mark Lentczner - markl@glyphic.com
// Copyright (C) 2005-2009 John Horigan - john@glyphic.com
// Copyright (C) 2005 Chris Coyne - ccoyne77@gmail.com
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
// 
// John Horigan can be contacted at john@glyphic.com or at
// John Horigan, 1209 Villa St., Mountain View, CA 94041-1123, USA
//
// Mark Lentczner can be contacted at markl@glyphic.com or at
// Mark Lentczner, 1209 Villa St., Mountain View, CA 94041-1123, USA
//
*/
#line 32 "../../src-common/cfdg.l"
    #define YY_NO_UNISTD_H
    #include "builder.h"
    #include "scanner.h"
    #include "astexpression.h"
    #include "cfdg.tab.hpp"

    /* import the parser's token type into a local typedef */
    typedef yy::CfdgParser::token token;
    typedef yy::CfdgParser::token_type token_type;    
    
/* calling this externally    */
/* don't want yywrap to exist.*/
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 65 "../../src-common/cfdg.l"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#line 900 "lex.yy.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 68 "../../src-common/cfdg.l"


 /* code to place at the beginning of yylex() */

    // reset location
    setupLoc(yylloc);
    
    if (startToken) {
        int t = startToken;
        startToken = 0;
        return t;
    }

                                                                
 /* comment line */
#line 1016 "lex.yy.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 275 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 274 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 83 "../../src-common/cfdg.l"
{
                                                                
    int c;
    
    while ((c = yyinput()) != 0) {
        if (c == '\n') break;
    }

    yylloc->lines(1); yylloc->step();
}
	YY_BREAK
/* C-style comment */
case 2:
YY_RULE_SETUP
#line 95 "../../src-common/cfdg.l"
{
    int c;
    bool lastCharWasAStar = false;
 
    // stop when we get to */ or end-of-file
    while ((c = yyinput()) != 0) {
        if (c == '\n') 
            yylloc->lines(1);
        else 
            yylloc->columns();
            
        if (c == '/' && lastCharWasAStar) 
            break;
        
        lastCharWasAStar = c == '*';
    }
    
    if (c == 0) {
        LexerError("end-of-file in C-style comment");
        return token::BADEOF;
    }
    
    yylloc->step();     // move on to next token
}
	YY_BREAK
/* Quoted string */
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 121 "../../src-common/cfdg.l"
{        /* \042 is " in ASCII */
    if (yytext[yyleng - 1] != '\042') {
        LexerError("end-of-line in quoted string");
        return token::BADEOF;
    } else {
        yylval->string = new std::string(yytext + 1, yyleng - 2); 
        return token::USER_QSTRING;
    }
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 131 "../../src-common/cfdg.l"
{return token::STARTSHAPE;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 132 "../../src-common/cfdg.l"
{return token::BACKGROUND;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 133 "../../src-common/cfdg.l"
{return token::INCLUDE;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 134 "../../src-common/cfdg.l"
{return token::IMPORT;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 135 "../../src-common/cfdg.l"
{return token::TILE;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 136 "../../src-common/cfdg.l"
{return token::RULE;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 137 "../../src-common/cfdg.l"
{return token::PATH;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 138 "../../src-common/cfdg.l"
{return token::SHAPE;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 139 "../../src-common/cfdg.l"
{return token::LOOP;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 140 "../../src-common/cfdg.l"
{return token::BECOMES;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 141 "../../src-common/cfdg.l"
{return token::FINALLY;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 142 "../../src-common/cfdg.l"
{return token::IF;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 143 "../../src-common/cfdg.l"
{return token::ELSE;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 144 "../../src-common/cfdg.l"
{return token::SWITCH;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 145 "../../src-common/cfdg.l"
{return token::CASE;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 146 "../../src-common/cfdg.l"
{return token::RANGEOP;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 147 "../../src-common/cfdg.l"
{return token::PLUSMINUSOP;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 148 "../../src-common/cfdg.l"
{return token::PLUSMINUSOP;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 150 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::time;          return token::MODTYPE;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 151 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::timescale;     return token::MODTYPE;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 152 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::rot;           return token::MODTYPE;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 153 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::rot;           return token::MODTYPE;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 154 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::flip;          return token::MODTYPE;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 155 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::flip;          return token::MODTYPE;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 156 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::hue;           return token::MODTYPE;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 157 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::hue;           return token::MODTYPE;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 158 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::sat;           return token::MODTYPE;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 159 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::sat;           return token::MODTYPE;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 160 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::bright;        return token::MODTYPE;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 161 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::bright;        return token::MODTYPE;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 162 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::alpha;         return token::MODTYPE;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 163 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::alpha;         return token::MODTYPE;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 164 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::x1;            return token::MODTYPE;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 165 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::y1;            return token::MODTYPE;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 166 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::x2;            return token::MODTYPE;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 167 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::y2;            return token::MODTYPE;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 168 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::transform;     return token::MODTYPE;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 169 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::transform;     return token::MODTYPE;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 170 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::x;             return token::MODTYPE;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 171 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::y;             return token::MODTYPE;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 172 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::xrad;          return token::MODTYPE;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 173 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::yrad;          return token::MODTYPE;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 174 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::z;             return token::MODTYPE;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 175 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::size;          return token::MODTYPE;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 176 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::size;          return token::MODTYPE;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 177 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::skew;          return token::MODTYPE;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 178 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::targHue;       return token::MODTYPE;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 179 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::targHue;       return token::MODTYPE;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 180 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::targSat;       return token::MODTYPE;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 181 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::targSat;       return token::MODTYPE;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 182 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::targBright;    return token::MODTYPE;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 183 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::targBright;    return token::MODTYPE;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 184 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::targAlpha;     return token::MODTYPE;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 185 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::targAlpha;     return token::MODTYPE;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 186 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::param;         return token::PARAM;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 187 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::param;         return token::PARAM;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 188 "../../src-common/cfdg.l"
{yylval->modToken = AST::ASTmodTerm::stroke;        return token::MODTYPE;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 190 "../../src-common/cfdg.l"
{ return token::LT; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 191 "../../src-common/cfdg.l"
{ return token::LE; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 192 "../../src-common/cfdg.l"
{ return token::LE; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 193 "../../src-common/cfdg.l"
{ return token::GT; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 194 "../../src-common/cfdg.l"
{ return token::GE; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 195 "../../src-common/cfdg.l"
{ return token::GE; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 196 "../../src-common/cfdg.l"
{ return token::EQ; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 197 "../../src-common/cfdg.l"
{ return token::NEQ; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 198 "../../src-common/cfdg.l"
{ return token::NEQ; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 199 "../../src-common/cfdg.l"
{ return token::NOT; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 200 "../../src-common/cfdg.l"
{ return token::AND; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 201 "../../src-common/cfdg.l"
{ return token::OR; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 202 "../../src-common/cfdg.l"
{ return token::XOR; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 203 "../../src-common/cfdg.l"
{ return '_'; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 205 "../../src-common/cfdg.l"
{yylval->string = new std::string(yytext); return token::USER_PATHOP;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 206 "../../src-common/cfdg.l"
{yylval->string = new std::string(yytext); return token::USER_STRING;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 207 "../../src-common/cfdg.l"
{yylval->string = new std::string(yytext); return token::USER_RATIONAL;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 208 "../../src-common/cfdg.l"
{
    yylval->string = new std::string(yytext, yyleng - 2);
    yyless(yyleng - 2);
    (yylloc->end) += -2;
    return token::USER_RATIONAL;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 214 "../../src-common/cfdg.l"
{yylval->string = new std::string(yytext); return token::USER_RATIONAL;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 215 "../../src-common/cfdg.l"
{yylval->string = new std::string(yytext); return token::USER_FILENAME;}
	YY_BREAK
/* gobble up white-spaces */
case 81:
YY_RULE_SETUP
#line 218 "../../src-common/cfdg.l"
{
    yylloc->step();
}
	YY_BREAK
/* gobble up end-of-lines */
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 223 "../../src-common/cfdg.l"
{
    yylloc->lines(1); yylloc->step();
}
	YY_BREAK
/* pass all other characters up to bison */
case 83:
YY_RULE_SETUP
#line 228 "../../src-common/cfdg.l"
{
    return static_cast<int>(*yytext);
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 232 "../../src-common/cfdg.l"
{
    if (!YY_CURRENT_BUFFER)
        yyterminate();
    if (!mLocationStack.empty()) {
        *yylloc = mLocationStack.top();
        mLocationStack.pop();
    }
    yylloc->step();
    return token::GOODEOF;
}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 243 "../../src-common/cfdg.l"
ECHO;
	YY_BREAK
#line 1596 "lex.yy.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	Cfdgfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	Cfdgfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					Cfdgrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) Cfdgrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 275 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 275 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 274);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) Cfdgalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) Cfdgalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		Cfdgfree((void *) b->yy_ch_buf  );

	Cfdgfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)Cfdgalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)Cfdgrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) Cfdgalloc(new_size  );

		else
			(yy_start_stack) = (int *) Cfdgrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *Cfdgalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *Cfdgrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void Cfdgfree (void * ptr )
{
	free( (char *) ptr );	/* see Cfdgrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 243 "../../src-common/cfdg.l"



namespace yy {

Scanner::Scanner(std::istream* in,
		 std::ostream* out)
    : yyFlexLexer(in, out), nextLocAction(normalAction), 
      startToken(token::CFDG2), maybeVersion(0)
{
}

Scanner::~Scanner()
{
}

void Scanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

void Scanner::LexerError(const char* msg) 
{
    driver->error(lineno(), msg);
}
    
void Scanner::setupLoc(CfdgParser::location_type* yylloc)
{
    switch (nextLocAction) {
        case normalAction:
        case popLoc:
            yylloc->step();
            break;
        case pushLoc:
            mLocationStack.push(*yylloc);
            *yylloc = CfdgParser::location_type();
            break;
    }
    nextLocAction = normalAction;
    yylloc->begin.filename = yylloc->end.filename = driver->m_currentPath;
}
    
}

/* This implementation of CfdgFlexLexer::yylex() is required to fill the
 * vtable of the class CfdgFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif

int yyFlexLexer::yylex()
{
    std::cerr << "in yyFlexLexer::yylex() !" << std::endl;
    return 0;
}


